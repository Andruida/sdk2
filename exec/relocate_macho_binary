#!/usr/bin/env python3
#
# Script to fix up load commands in Mach-O binaries, so that they
# are relocatable

import subprocess as sp
import re
import os
import os.path as op
import sys

# Get a list of loader commands

def get_load_cmds(file):

    cp = sp.run(f'otool -l {file}', text=True, shell=True, capture_output=True)

    cmd_list = []

    for line in cp.stdout.splitlines():

        mo = re.match(r'Load command (\d+)', line)

        if mo:
            cmd_list += [{}]
            cmd_list[-1]['cmd_num'] = int(mo.group(1))
            continue

        mo = re.match(r'\s+cmd\s+(\S+)', line)

        if mo:
            cmd_list[-1]['cmd_name'] = mo.group(1)
            continue

        mo = re.match(r'\s+name\s+(\S+)', line)

        if mo:
            cmd_list[-1]['name'] = mo.group(1)
            continue

        mo = re.match(r'\s+path\s+(\S+)', line)

        if mo:
            cmd_list[-1]['path'] = mo.group(1)
            continue

    return cmd_list


# Get the list of rpaths

def get_rpaths(file, cmd_list):

    rpath_list = []

    for cmd in cmd_list:
        if cmd['cmd_name'] == 'LC_RPATH':

            mo = re.match(r'@loader_path(.*)', cmd['path'])

            if mo:
                rpath_list += [{'path': cmd['path'],
                                'expanded_path': op.dirname(op.abspath(file))+mo.group(1)}]
            else:
                rpath_list += [{'path': cmd['path'],
                                'expanded_path': cmd['path']}]

    return rpath_list


# Resolve @rpath names

def resolve_names(cmd_list, rpath_list):

    for cmd in cmd_list:

        if cmd['cmd_name'] == 'LC_LOAD_DYLIB':

            mo = re.match(r'@rpath(.*)', cmd['name'])

            resolved_name = None

            if mo:

                for rpath in rpath_list:
                    test_name = op.normpath(f'{rpath["expanded_path"]}{mo.group(1)}')
                    if op.exists(test_name):
                        resolved_name = test_name

            else:

                if (re.match(r'/usr/lib', cmd['name']) or
                    op.exists(cmd['name'])):
                        resolved_name = cmd['name']

            if resolved_name is None:
                raise Exception(f'Could not resolve path {cmd["name"]}')

            cmd['resolved_name'] = resolved_name

            
# Relocate names to be relative to base_dir

def relocate_names(cmd_list, base_dir):

    for cmd in cmd_list:

        if cmd['cmd_name'] == 'LC_LOAD_DYLIB':

            mo = re.match(f'{base_dir}(.*)', cmd['resolved_name'])

            if mo:
                cmd['relocated_name'] = f'@rpath{mo.group(1)}'
            else:
                cmd['relocated_name'] = cmd['resolved_name']

            
# Determine Mach-O file type

def macho_type(file):

    if op.exists(file) and not op.islink(file):

        # Check if the file is Mach-O format

        cp = sp.run(f'file {file}', text=True, shell=True, capture_output=True)

        if re.search('Mach-O', cp.stdout):

            if re.search('shared library stub', cp.stdout):

                type = 'stub'

            elif re.search('executable', cp.stdout):

                type = 'exec'

            else:

                type = 'lib'

        else:

            type = 'other'

    else:

        type = None

    return type


# Run install_name_tool

def run_tool(file, args):

    os.system(f'install_name_tool {args} {file}')
    #print(f'install_name_tool {args} {file}')

#

if __name__ == '__main__':

    # Get arguments

    file = sys.argv[1]
    base_dir = sys.argv[2]

    # Check the file is real

    # Check the file type

    type = macho_type(file)

    if type == 'exec' or type == 'lib':

        print(f'Processing {file}')

        # Get the load command list

        cmd_list = get_load_cmds(file)

        # Get the rpath list

        rpath_list = get_rpaths(file, cmd_list)

        # Resolve and relocated names

        resolve_names(cmd_list, rpath_list)
        relocate_names(cmd_list, base_dir)

        # Take actions

        # Strip all existing rpaths

        for rpath in rpath_list:
            run_tool(file, f'-delete_rpath {rpath["path"]}')

        # Set the rpath of executables

        if type == 'exec':
            run_tool(file, f'-add_rpath @loader_path/'+op.relpath(base_dir, op.dirname(file)))

        # Relocate names

        for cmd in cmd_list:
            if cmd['cmd_name'] == 'LC_LOAD_DYLIB':
                if cmd['name'] != cmd['relocated_name']:
                    run_tool(file, f'-change {cmd["name"]} {cmd["relocated_name"]}')

        # Set the install name of libraries

        if type == 'lib':

            mo = re.match(f'{base_dir}(.*)', op.abspath(file))

            run_tool(file, f'-id @rpath{mo.group(1)}')
